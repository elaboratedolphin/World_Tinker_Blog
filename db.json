[{"model": "contenttypes.contenttype", "pk": 1, "fields": {"app_label": "admin", "model": "logentry"}}, {"model": "contenttypes.contenttype", "pk": 2, "fields": {"app_label": "auth", "model": "permission"}}, {"model": "contenttypes.contenttype", "pk": 3, "fields": {"app_label": "auth", "model": "group"}}, {"model": "contenttypes.contenttype", "pk": 4, "fields": {"app_label": "auth", "model": "user"}}, {"model": "contenttypes.contenttype", "pk": 5, "fields": {"app_label": "contenttypes", "model": "contenttype"}}, {"model": "contenttypes.contenttype", "pk": 6, "fields": {"app_label": "sessions", "model": "session"}}, {"model": "contenttypes.contenttype", "pk": 7, "fields": {"app_label": "tinker_app", "model": "post"}}, {"model": "contenttypes.contenttype", "pk": 8, "fields": {"app_label": "tinker_app", "model": "comment"}}, {"model": "contenttypes.contenttype", "pk": 9, "fields": {"app_label": "tinker_app", "model": "user"}}, {"model": "contenttypes.contenttype", "pk": 10, "fields": {"app_label": "posts", "model": "comment"}}, {"model": "contenttypes.contenttype", "pk": 11, "fields": {"app_label": "posts", "model": "post"}}, {"model": "contenttypes.contenttype", "pk": 12, "fields": {"app_label": "posts", "model": "user"}}, {"model": "contenttypes.contenttype", "pk": 13, "fields": {"app_label": "accounts", "model": "userprofileinfo"}}, {"model": "sessions.session", "pk": "82zyp8rysgf3vv6k1bl1f3x735xl97aa", "fields": {"session_data": "MWNlMzZiZTQ5M2U0MTk0YzRjOTY4ZTc1NWRlZjUyMDg5Njk3MjlhZTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiYWNjb3VudHMubW9kZWxzLkVtYWlsQmFja2VuZCIsIl9hdXRoX3VzZXJfaGFzaCI6IjBkMTAxZDNhY2M4Y2YwNDlhYjBhZDYxOWYwYjQ3YjIyZTExZDA0MWIifQ==", "expire_date": "2020-07-05T04:33:30.715Z"}}, {"model": "sessions.session", "pk": "uas6rcqf0knfv2seqch92vaph4gl2fnc", "fields": {"session_data": "ZTkzYWZmNjhmZWY4ODRiNzU2YWQ1YWIwMDIzMDAxNmM4MGJhNTgzYzp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIwZDEwMWQzYWNjOGNmMDQ5YWIwYWQ2MTlmMGI0N2IyMmUxMWQwNDFiIn0=", "expire_date": "2020-06-23T06:35:46.760Z"}}, {"model": "auth.permission", "pk": 1, "fields": {"name": "Can add log entry", "content_type": 1, "codename": "add_logentry"}}, {"model": "auth.permission", "pk": 2, "fields": {"name": "Can change log entry", "content_type": 1, "codename": "change_logentry"}}, {"model": "auth.permission", "pk": 3, "fields": {"name": "Can delete log entry", "content_type": 1, "codename": "delete_logentry"}}, {"model": "auth.permission", "pk": 4, "fields": {"name": "Can view log entry", "content_type": 1, "codename": "view_logentry"}}, {"model": "auth.permission", "pk": 5, "fields": {"name": "Can add permission", "content_type": 2, "codename": "add_permission"}}, {"model": "auth.permission", "pk": 6, "fields": {"name": "Can change permission", "content_type": 2, "codename": "change_permission"}}, {"model": "auth.permission", "pk": 7, "fields": {"name": "Can delete permission", "content_type": 2, "codename": "delete_permission"}}, {"model": "auth.permission", "pk": 8, "fields": {"name": "Can view permission", "content_type": 2, "codename": "view_permission"}}, {"model": "auth.permission", "pk": 9, "fields": {"name": "Can add group", "content_type": 3, "codename": "add_group"}}, {"model": "auth.permission", "pk": 10, "fields": {"name": "Can change group", "content_type": 3, "codename": "change_group"}}, {"model": "auth.permission", "pk": 11, "fields": {"name": "Can delete group", "content_type": 3, "codename": "delete_group"}}, {"model": "auth.permission", "pk": 12, "fields": {"name": "Can view group", "content_type": 3, "codename": "view_group"}}, {"model": "auth.permission", "pk": 13, "fields": {"name": "Can add user", "content_type": 4, "codename": "add_user"}}, {"model": "auth.permission", "pk": 14, "fields": {"name": "Can change user", "content_type": 4, "codename": "change_user"}}, {"model": "auth.permission", "pk": 15, "fields": {"name": "Can delete user", "content_type": 4, "codename": "delete_user"}}, {"model": "auth.permission", "pk": 16, "fields": {"name": "Can view user", "content_type": 4, "codename": "view_user"}}, {"model": "auth.permission", "pk": 17, "fields": {"name": "Can add content type", "content_type": 5, "codename": "add_contenttype"}}, {"model": "auth.permission", "pk": 18, "fields": {"name": "Can change content type", "content_type": 5, "codename": "change_contenttype"}}, {"model": "auth.permission", "pk": 19, "fields": {"name": "Can delete content type", "content_type": 5, "codename": "delete_contenttype"}}, {"model": "auth.permission", "pk": 20, "fields": {"name": "Can view content type", "content_type": 5, "codename": "view_contenttype"}}, {"model": "auth.permission", "pk": 21, "fields": {"name": "Can add session", "content_type": 6, "codename": "add_session"}}, {"model": "auth.permission", "pk": 22, "fields": {"name": "Can change session", "content_type": 6, "codename": "change_session"}}, {"model": "auth.permission", "pk": 23, "fields": {"name": "Can delete session", "content_type": 6, "codename": "delete_session"}}, {"model": "auth.permission", "pk": 24, "fields": {"name": "Can view session", "content_type": 6, "codename": "view_session"}}, {"model": "auth.permission", "pk": 25, "fields": {"name": "Can add post", "content_type": 7, "codename": "add_post"}}, {"model": "auth.permission", "pk": 26, "fields": {"name": "Can change post", "content_type": 7, "codename": "change_post"}}, {"model": "auth.permission", "pk": 27, "fields": {"name": "Can delete post", "content_type": 7, "codename": "delete_post"}}, {"model": "auth.permission", "pk": 28, "fields": {"name": "Can view post", "content_type": 7, "codename": "view_post"}}, {"model": "auth.permission", "pk": 29, "fields": {"name": "Can add comment", "content_type": 8, "codename": "add_comment"}}, {"model": "auth.permission", "pk": 30, "fields": {"name": "Can change comment", "content_type": 8, "codename": "change_comment"}}, {"model": "auth.permission", "pk": 31, "fields": {"name": "Can delete comment", "content_type": 8, "codename": "delete_comment"}}, {"model": "auth.permission", "pk": 32, "fields": {"name": "Can view comment", "content_type": 8, "codename": "view_comment"}}, {"model": "auth.permission", "pk": 33, "fields": {"name": "Can add user", "content_type": 9, "codename": "add_user"}}, {"model": "auth.permission", "pk": 34, "fields": {"name": "Can change user", "content_type": 9, "codename": "change_user"}}, {"model": "auth.permission", "pk": 35, "fields": {"name": "Can delete user", "content_type": 9, "codename": "delete_user"}}, {"model": "auth.permission", "pk": 36, "fields": {"name": "Can view user", "content_type": 9, "codename": "view_user"}}, {"model": "auth.permission", "pk": 37, "fields": {"name": "Can add comment", "content_type": 10, "codename": "add_comment"}}, {"model": "auth.permission", "pk": 38, "fields": {"name": "Can change comment", "content_type": 10, "codename": "change_comment"}}, {"model": "auth.permission", "pk": 39, "fields": {"name": "Can delete comment", "content_type": 10, "codename": "delete_comment"}}, {"model": "auth.permission", "pk": 40, "fields": {"name": "Can view comment", "content_type": 10, "codename": "view_comment"}}, {"model": "auth.permission", "pk": 41, "fields": {"name": "Can add post", "content_type": 11, "codename": "add_post"}}, {"model": "auth.permission", "pk": 42, "fields": {"name": "Can change post", "content_type": 11, "codename": "change_post"}}, {"model": "auth.permission", "pk": 43, "fields": {"name": "Can delete post", "content_type": 11, "codename": "delete_post"}}, {"model": "auth.permission", "pk": 44, "fields": {"name": "Can view post", "content_type": 11, "codename": "view_post"}}, {"model": "auth.permission", "pk": 45, "fields": {"name": "Can add user", "content_type": 12, "codename": "add_user"}}, {"model": "auth.permission", "pk": 46, "fields": {"name": "Can change user", "content_type": 12, "codename": "change_user"}}, {"model": "auth.permission", "pk": 47, "fields": {"name": "Can delete user", "content_type": 12, "codename": "delete_user"}}, {"model": "auth.permission", "pk": 48, "fields": {"name": "Can view user", "content_type": 12, "codename": "view_user"}}, {"model": "auth.permission", "pk": 49, "fields": {"name": "Can add user profile info", "content_type": 13, "codename": "add_userprofileinfo"}}, {"model": "auth.permission", "pk": 50, "fields": {"name": "Can change user profile info", "content_type": 13, "codename": "change_userprofileinfo"}}, {"model": "auth.permission", "pk": 51, "fields": {"name": "Can delete user profile info", "content_type": 13, "codename": "delete_userprofileinfo"}}, {"model": "auth.permission", "pk": 52, "fields": {"name": "Can view user profile info", "content_type": 13, "codename": "view_userprofileinfo"}}, {"model": "auth.group", "pk": 1, "fields": {"name": "Members", "permissions": [37, 40, 28]}}, {"model": "auth.user", "pk": 1, "fields": {"password": "argon2$argon2i$v=19$m=512,t=2,p=2$ZU9pcmtVNE40S3VB$HeXUPmwPgWjpistKlHAx1g", "last_login": "2020-06-21T04:33:30.678Z", "is_superuser": true, "username": "edward", "first_name": "edward", "last_name": "Kim", "email": "milkyipod@gmail.com", "is_staff": true, "is_active": true, "date_joined": "2020-05-31T06:35:54Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 9, "fields": {"password": "argon2$argon2i$v=19$m=512,t=2,p=2$R1NINkM1S2tXYXZt$ANZViIkOvsIs3tOcv4HxRA", "last_login": "2020-06-17T06:23:01.954Z", "is_superuser": false, "username": "test", "first_name": "test", "last_name": "test", "email": "test@gmail.com", "is_staff": false, "is_active": true, "date_joined": "2020-06-05T08:49:44.322Z", "groups": [1], "user_permissions": []}}, {"model": "auth.user", "pk": 10, "fields": {"password": "argon2$argon2i$v=19$m=512,t=2,p=2$OXNUMU5rQWhaa0JN$p7156ue+JLEN71BgkFSqSw", "last_login": "2020-06-05T09:19:22.462Z", "is_superuser": false, "username": "test2", "first_name": "test", "last_name": "test", "email": "test2@gmail.com", "is_staff": false, "is_active": true, "date_joined": "2020-06-05T09:19:15.324Z", "groups": [1], "user_permissions": []}}, {"model": "posts.post", "pk": 4, "fields": {"author": 1, "title": "TEST", "text": "<p>&quot;Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?&quot;</p>", "image": "", "slug": "test", "created_date": "2020-06-06T00:15:30Z", "published_date": "2020-06-06T00:15:36Z", "views": 6, "food": false, "movie": false, "faith": true, "life": false}}, {"model": "posts.post", "pk": 5, "fields": {"author": 1, "title": "TEST 2", "text": "<p>Philosophy (from Greek: &phi;&iota;&lambda;&omicron;&sigma;&omicron;&phi;\u03af&alpha;, philosophia, &#39;love of wisdom&#39;)[1][2][3] is the study of general and fundamental questions about existence, knowledge, values, reason, mind, and language.[4][5] Such questions are often posed as problems[6][7] to be studied or resolved. The term was probably coined by Pythagoras (c. 570 &ndash; 495 BCE). Philosophical methods include questioning, critical discussion, rational argument, and systematic presentation.[8][9][i]</p>\r\n\r\n<p>Classic philosophical questions include: &#39;is it possible to know anything and to prove it?&#39;[10][11][12] and &#39;what is most real?&#39; Philosophers also pose more practical and concrete questions such as: &#39;is there a best way to live?&#39;, &#39;is it better to be just or unjust (if one can get away with it)?&#39;,[13] &#39;do humans have free will?&#39;[14]</p>\r\n\r\n<p>Historically, philosophy encompassed all bodies of knowledge.[15] From the time of Ancient Greek philosopher Aristotle to the 19th century, &quot;natural philosophy&quot; encompassed astronomy, medicine, and physics.[16] For example, Newton&#39;s 1687 Mathematical Principles of Natural Philosophy later became classified as a book of physics.</p>\r\n\r\n<p>In the 19th century, the growth of modern research universities led academic philosophy and other disciplines to professionalize and specialize.[17][18] In the modern era, some investigations that were traditionally part of philosophy became separate academic disciplines, including psychology, sociology, linguistics, and economics. Other investigations closely related to art, science, politics, or other pursuits remained part of philosophy. For example, is beauty objective or subjective?[19][20] Are there many scientific methods or just one?[21] Is political utopia a hopeful dream or hopeless fantasy?[22][23][24]</p>\r\n\r\n<p>Major sub-fields of academic philosophy include: metaphysics, which is &quot;concerned with the fundamental nature of reality and being;&quot;[25] and epistemology, which is about &quot;nature and grounds of knowledge [and]&hellip;its limits and validity;&quot;[26] as well as ethics, aesthetics, political philosophy, logic, and philosophy of science.</p>", "image": "", "slug": "test-2", "created_date": "2020-06-06T07:34:09Z", "published_date": "2020-06-06T07:34:13Z", "views": 2, "food": false, "movie": false, "faith": true, "life": false}}, {"model": "posts.post", "pk": 6, "fields": {"author": 1, "title": "Third Blog Post", "text": "<p>S&oslash;ren Aabye Kierkegaard (/\u02c8s\u0252r\u0259n \u02c8k\u026a\u0259rk\u0259\u0261\u0251\u02d0rd/ SORR-\u0259n KEER-k\u0259-gard, also US: /-\u0261\u0254\u02d0r/ -\u2060gor, Danish: [\u02c8s&oelig;\u02d0\u0250n \u02c8k\u02b0i\u0250\u032fk\u0259\u02cck\u0252\u02c0] (About this soundlisten); 5 May 1813 &ndash; 11 November 1855)[7] was a Danish philosopher, theologian, poet, social critic and religious author who is widely considered to be the first existentialist philosopher.[8][9] He wrote critical texts on organized religion, Christendom, morality, ethics, psychology, and the philosophy of religion, displaying a fondness for metaphor, irony and parables. Much of his philosophical work deals with the issues of how one lives as a &quot;single individual&quot;, giving priority to concrete human reality over abstract thinking and highlighting the importance of personal choice and commitment.[10] He was against literary critics who defined idealist intellectuals and philosophers of his time, and thought that Swedenborg,[11] Hegel,[12] Fichte, Schelling, Schlegel and Hans Christian Andersen were all &quot;understood&quot; far too quickly by &quot;scholars&quot;.[13]</p>\r\n\r\n<p>Kierkegaard&#39;s theological work focuses on Christian ethics, the institution of the Church, the differences between purely objective proofs of Christianity, the infinite qualitative distinction between man and God, and the individual&#39;s subjective relationship to the God-Man Jesus the Christ,[14] which came through faith.[15][16] Much of his work deals with Christian love. He was extremely critical of the practice of Christianity as a state religion, primarily that of the Church of Denmark. His psychological work explored the emotions and feelings of individuals when faced with life choices.[2]</p>\r\n\r\n<p>Kierkegaard&#39;s early work was written under the various pseudonyms to present distinctive viewpoints that interact in complex dialogue.[17] He explored particularly complex problems from different viewpoints, each under a different pseudonym. He wrote many Upbuilding Discourses under his own name and dedicated them to the &quot;single individual&quot; who might want to discover the meaning of his works. Notably, he wrote: &quot;Science[18] and scholarship want to teach that becoming objective is the way. Christianity teaches that the way is to become subjective, to become a subject.&quot;[19] While scientists can learn about the world by observation, Kierkegaard emphatically denied that observation alone could reveal the inner workings of the world of the spirit.[20]</p>\r\n\r\n<p>Some of Kierkegaard&#39;s key ideas include the concept of &quot;subjective and objective truths&quot;, the knight of faith, the recollection and repetition dichotomy, angst, the infinite qualitative distinction, faith as a passion, and the three stages on life&#39;s way. Kierkegaard wrote in Danish and the reception of his work was initially limited to Scandinavia, but by the turn of the 20th century his writings were translated into French, German, and other major European languages. By the mid-20th century, his thought exerted a substantial influence on philosophy,[21] theology,[22] and Western culture.[23]</p>", "image": "", "slug": "third-blog-post", "created_date": "2020-06-06T12:54:59Z", "published_date": "2020-06-06T12:55:01Z", "views": 0, "food": false, "movie": false, "faith": true, "life": false}}, {"model": "posts.post", "pk": 7, "fields": {"author": 1, "title": "Where is Mom", "text": "<p><img alt=\"\" src=\"https://www.popsci.com/resizer/8OQN_ZZnLJ6B_jiNxtl6ORFqkvM=/1034x689/cloudfront-us-east-1.images.arcpublishing.com/bonnier/3NIEQB3SFVCMNHH6MHZ42FO6PA.jpg\" style=\"height:465px; width:698px\" /></p>\r\n\r\n<p style=\"text-align:justify\">Philosophy (from Greek: &phi;&iota;&lambda;&omicron;&sigma;&omicron;&phi;\u03af&alpha;, philosophia, &#39;love of wisdom&#39;)[1][2][3] is the study of general and fundamental questions about existence, knowledge, values, reason, mind, and language.[4][5] Such questions are often posed as problems[6][7] to be studied or resolved. The term was probably coined by Pythagoras (c. 570 &ndash; 495 BCE). Philosophical methods include questioning, critical discussion, rational argument, and systematic presentation.[8][9][i]</p>\r\n\r\n<p style=\"text-align:justify\">Classic philosophical questions include: &#39;is it possible to know anything and to prove it?&#39;[10][11][12] and &#39;what is most real?&#39; Philosophers also pose more practical and concrete questions such as: &#39;is there a best way to live?&#39;, &#39;is it better to be just or unjust (if one can get away with it)?&#39;,[13] &#39;do humans have free will?&#39;[14]</p>\r\n\r\n<p style=\"text-align:justify\">Historically, philosophy encompassed all bodies of knowledge.[15] From the time of Ancient Greek philosopher Aristotle to the 19th century, &quot;natural philosophy&quot; encompassed astronomy, medicine, and physics.[16] For example, Newton&#39;s 1687 Mathematical Principles of Natural Philosophy later became classified as a book of physics.</p>\r\n\r\n<p style=\"text-align:justify\">In the 19th century, the growth of modern research universities led academic philosophy and other disciplines to professionalize and specialize.[17][18] In the modern era, some investigations that were traditionally part of philosophy became separate academic disciplines, including psychology, sociology, linguistics, and economics. Other investigations closely related to art, science, politics, or other pursuits remained part of philosophy. For example, is beauty objective or subjective?[19][20] Are there many scientific methods or just one?[21] Is political utopia a hopeful dream or hopeless fantasy?[22][23][24]</p>\r\n\r\n<p style=\"text-align:justify\">Major sub-fields of academic philosophy include: metaphysics, which is &quot;concerned with the fundamental nature of reality and being;&quot;[25] and epistemology, which is about &quot;nature and grounds of knowledge [and]&hellip;its limits and validity;&quot;[26] as well as ethics, aesthetics, political philosophy, logic, and philosophy of science.</p>", "image": "", "slug": "where-is-mom", "created_date": "2020-06-07T02:04:42Z", "published_date": "2020-06-07T02:04:49Z", "views": 16, "food": false, "movie": false, "faith": true, "life": false}}, {"model": "posts.post", "pk": 8, "fields": {"author": 1, "title": "food test", "text": "<p style=\"text-align:justify\">The&nbsp;<a href=\"https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.db_type\" title=\"django.db.models.Field.db_type\"><code>db_type()</code></a>&nbsp;and&nbsp;<a href=\"https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.rel_db_type\" title=\"django.db.models.Field.rel_db_type\"><code>rel_db_type()</code></a>&nbsp;methods are called by Django when the framework constructs the&nbsp;<code>CREATE&nbsp;TABLE</code>&nbsp;statements for your application &ndash; that is, when you first create your tables. The methods are also called when constructing a&nbsp;<code>WHERE</code>&nbsp;clause that includes the model field &ndash; that is, when you retrieve data using QuerySet methods like&nbsp;<code>get()</code>,&nbsp;<code>filter()</code>, and&nbsp;<code>exclude()</code>&nbsp;and have the model field as an argument. They are not called at any other time, so it can afford to execute slightly complex code, such as the&nbsp;<code>connection.settings_dict</code>&nbsp;check in the above example.</p>\r\n\r\n<p style=\"text-align:justify\">Some database column types accept parameters, such as&nbsp;<code>CHAR(25)</code>, where the parameter&nbsp;<code>25</code>&nbsp;represents the maximum column length. In cases like these, it&rsquo;s more flexible if the parameter is specified in the model rather than being hard-coded in the&nbsp;<code>db_type()</code>&nbsp;method. For example, it wouldn&rsquo;t make much sense to have a&nbsp;<code>CharMaxlength25Field</code>, shown here:</p>", "image": "", "slug": "food-test", "created_date": "2020-06-19T07:11:57Z", "published_date": "2020-06-19T07:12:46Z", "views": 1, "food": true, "movie": false, "faith": false, "life": false}}, {"model": "posts.post", "pk": 9, "fields": {"author": 1, "title": "food test 2", "text": "<p>The&nbsp;<a href=\"https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.db_type\" title=\"django.db.models.Field.db_type\"><code>db_type()</code></a>&nbsp;and&nbsp;<a href=\"https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.rel_db_type\" title=\"django.db.models.Field.rel_db_type\"><code>rel_db_type()</code></a>&nbsp;methods are called by Django when the framework constructs the&nbsp;<code>CREATE&nbsp;TABLE</code>&nbsp;statements for your application &ndash; that is, when you first create your tables. The methods are also called when constructing a&nbsp;<code>WHERE</code>&nbsp;clause that includes the model field &ndash; that is, when you retrieve data using QuerySet methods like&nbsp;<code>get()</code>,&nbsp;<code>filter()</code>, and&nbsp;<code>exclude()</code>&nbsp;and have the model field as an argument. They are not called at any other time, so it can afford to execute slightly complex code, such as the&nbsp;<code>connection.settings_dict</code>&nbsp;check in the above example.</p>\r\n\r\n<p>Some database column types accept parameters, such as&nbsp;<code>CHAR(25)</code>, where the parameter&nbsp;<code>25</code>&nbsp;represents the maximum column length. In cases like these, it&rsquo;s more flexible if the parameter is specified in the model rather than being hard-coded in the&nbsp;<code>db_type()</code>&nbsp;method. For example, it wouldn&rsquo;t make much sense to have a&nbsp;<code>CharMaxlength25Field</code>, shown here:</p>", "image": "", "slug": "food-test-2", "created_date": "2020-06-19T07:13:06Z", "published_date": "2020-06-19T07:13:18Z", "views": 0, "food": true, "movie": false, "faith": false, "life": false}}, {"model": "posts.post", "pk": 10, "fields": {"author": 1, "title": "food test 3", "text": "<p>The&nbsp;<a href=\"https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.db_type\" title=\"django.db.models.Field.db_type\"><code>db_type()</code></a>&nbsp;and&nbsp;<a href=\"https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.rel_db_type\" title=\"django.db.models.Field.rel_db_type\"><code>rel_db_type()</code></a>&nbsp;methods are called by Django when the framework constructs the&nbsp;<code>CREATE&nbsp;TABLE</code>&nbsp;statements for your application &ndash; that is, when you first create your tables. The methods are also called when constructing a&nbsp;<code>WHERE</code>&nbsp;clause that includes the model field &ndash; that is, when you retrieve data using QuerySet methods like&nbsp;<code>get()</code>,&nbsp;<code>filter()</code>, and&nbsp;<code>exclude()</code>&nbsp;and have the model field as an argument. They are not called at any other time, so it can afford to execute slightly complex code, such as the&nbsp;<code>connection.settings_dict</code>&nbsp;check in the above example.</p>\r\n\r\n<p>Some database column types accept parameters, such as&nbsp;<code>CHAR(25)</code>, where the parameter&nbsp;<code>25</code>&nbsp;represents the maximum column length. In cases like these, it&rsquo;s more flexible if the parameter is specified in the model rather than being hard-coded in the&nbsp;<code>db_type()</code>&nbsp;method. For example, it wouldn&rsquo;t make much sense to have a&nbsp;<code>CharMaxlength25Field</code>, shown here:</p>", "image": "", "slug": "food-test-3", "created_date": "2020-06-19T07:13:24Z", "published_date": "2020-06-19T07:13:34Z", "views": 0, "food": true, "movie": false, "faith": false, "life": false}}, {"model": "posts.post", "pk": 11, "fields": {"author": 1, "title": "food test 4", "text": "<p>The&nbsp;<a href=\"https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.db_type\" title=\"django.db.models.Field.db_type\"><code>db_type()</code></a>&nbsp;and&nbsp;<a href=\"https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.rel_db_type\" title=\"django.db.models.Field.rel_db_type\"><code>rel_db_type()</code></a>&nbsp;methods are called by Django when the framework constructs the&nbsp;<code>CREATE&nbsp;TABLE</code>&nbsp;statements for your application &ndash; that is, when you first create your tables. The methods are also called when constructing a&nbsp;<code>WHERE</code>&nbsp;clause that includes the model field &ndash; that is, when you retrieve data using QuerySet methods like&nbsp;<code>get()</code>,&nbsp;<code>filter()</code>, and&nbsp;<code>exclude()</code>&nbsp;and have the model field as an argument. They are not called at any other time, so it can afford to execute slightly complex code, such as the&nbsp;<code>connection.settings_dict</code>&nbsp;check in the above example.</p>\r\n\r\n<p>Some database column types accept parameters, such as&nbsp;<code>CHAR(25)</code>, where the parameter&nbsp;<code>25</code>&nbsp;represents the maximum column length. In cases like these, it&rsquo;s more flexible if the parameter is specified in the model rather than being hard-coded in the&nbsp;<code>db_type()</code>&nbsp;method. For example, it wouldn&rsquo;t make much sense to have a&nbsp;<code>CharMaxlength25Field</code>, shown here:</p>", "image": "", "slug": "food-test-4", "created_date": "2020-06-19T07:13:40Z", "published_date": "2020-06-19T07:13:47Z", "views": 3, "food": true, "movie": false, "faith": false, "life": false}}, {"model": "posts.post", "pk": 12, "fields": {"author": 1, "title": "movie test 1", "text": "", "image": "", "slug": "movie-test-1", "created_date": "2020-06-19T07:18:03Z", "published_date": "2020-06-19T07:18:10Z", "views": 5, "food": false, "movie": true, "faith": false, "life": false}}, {"model": "posts.post", "pk": 13, "fields": {"author": 1, "title": "movie test 2", "text": "<p>The&nbsp;<a href=\"https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.db_type\" title=\"django.db.models.Field.db_type\"><code>db_type()</code></a>&nbsp;and&nbsp;<a href=\"https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.rel_db_type\" title=\"django.db.models.Field.rel_db_type\"><code>rel_db_type()</code></a>&nbsp;methods are called by Django when the framework constructs the&nbsp;<code>CREATE&nbsp;TABLE</code>&nbsp;statements for your application &ndash; that is, when you first create your tables. The methods are also called when constructing a&nbsp;<code>WHERE</code>&nbsp;clause that includes the model field &ndash; that is, when you retrieve data using QuerySet methods like&nbsp;<code>get()</code>,&nbsp;<code>filter()</code>, and&nbsp;<code>exclude()</code>&nbsp;and have the model field as an argument. They are not called at any other time, so it can afford to execute slightly complex code, such as the&nbsp;<code>connection.settings_dict</code>&nbsp;check in the above example.</p>\r\n\r\n<p>Some database column types accept parameters, such as&nbsp;<code>CHAR(25)</code>, where the parameter&nbsp;<code>25</code>&nbsp;represents the maximum column length. In cases like these, it&rsquo;s more flexible if the parameter is specified in the model rather than being hard-coded in the&nbsp;<code>db_type()</code>&nbsp;method. For example, it wouldn&rsquo;t make much sense to have a&nbsp;<code>CharMaxlength25Field</code>, shown here:</p>", "image": "", "slug": "movie-test-2", "created_date": "2020-06-19T07:18:31Z", "published_date": "2020-06-19T07:18:41Z", "views": 1, "food": false, "movie": true, "faith": false, "life": false}}, {"model": "posts.post", "pk": 14, "fields": {"author": 1, "title": "movie test 3", "text": "<p>The&nbsp;<a href=\"https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.db_type\" title=\"django.db.models.Field.db_type\"><code>db_type()</code></a>&nbsp;and&nbsp;<a href=\"https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.rel_db_type\" title=\"django.db.models.Field.rel_db_type\"><code>rel_db_type()</code></a>&nbsp;methods are called by Django when the framework constructs the&nbsp;<code>CREATE&nbsp;TABLE</code>&nbsp;statements for your application &ndash; that is, when you first create your tables. The methods are also called when constructing a&nbsp;<code>WHERE</code>&nbsp;clause that includes the model field &ndash; that is, when you retrieve data using QuerySet methods like&nbsp;<code>get()</code>,&nbsp;<code>filter()</code>, and&nbsp;<code>exclude()</code>&nbsp;and have the model field as an argument. They are not called at any other time, so it can afford to execute slightly complex code, such as the&nbsp;<code>connection.settings_dict</code>&nbsp;check in the above example.</p>\r\n\r\n<p>Some database column types accept parameters, such as&nbsp;<code>CHAR(25)</code>, where the parameter&nbsp;<code>25</code>&nbsp;represents the maximum column length. In cases like these, it&rsquo;s more flexible if the parameter is specified in the model rather than being hard-coded in the&nbsp;<code>db_type()</code>&nbsp;method. For example, it wouldn&rsquo;t make much sense to have a&nbsp;<code>CharMaxlength25Field</code>, shown here:</p>", "image": "", "slug": "movie-test-3", "created_date": "2020-06-19T07:18:47Z", "published_date": "2020-06-19T07:18:58Z", "views": 3, "food": false, "movie": true, "faith": false, "life": false}}, {"model": "posts.post", "pk": 15, "fields": {"author": 1, "title": "movie test 4", "text": "<p>The&nbsp;<a href=\"https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.db_type\" title=\"django.db.models.Field.db_type\"><code>db_type()</code></a>&nbsp;and&nbsp;<a href=\"https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.rel_db_type\" title=\"django.db.models.Field.rel_db_type\"><code>rel_db_type()</code></a>&nbsp;methods are called by Django when the framework constructs the&nbsp;<code>CREATE&nbsp;TABLE</code>&nbsp;statements for your application &ndash; that is, when you first create your tables. The methods are also called when constructing a&nbsp;<code>WHERE</code>&nbsp;clause that includes the model field &ndash; that is, when you retrieve data using QuerySet methods like&nbsp;<code>get()</code>,&nbsp;<code>filter()</code>, and&nbsp;<code>exclude()</code>&nbsp;and have the model field as an argument. They are not called at any other time, so it can afford to execute slightly complex code, such as the&nbsp;<code>connection.settings_dict</code>&nbsp;check in the above example.</p>\r\n\r\n<p>Some database column types accept parameters, such as&nbsp;<code>CHAR(25)</code>, where the parameter&nbsp;<code>25</code>&nbsp;represents the maximum column length. In cases like these, it&rsquo;s more flexible if the parameter is specified in the model rather than being hard-coded in the&nbsp;<code>db_type()</code>&nbsp;method. For example, it wouldn&rsquo;t make much sense to have a&nbsp;<code>CharMaxlength25Field</code>, shown here:</p>", "image": "", "slug": "movie-test-4", "created_date": "2020-06-19T07:19:04Z", "published_date": "2020-06-19T07:19:12Z", "views": 4, "food": false, "movie": true, "faith": false, "life": false}}, {"model": "posts.post", "pk": 16, "fields": {"author": 1, "title": "life test 1", "text": "<p>The&nbsp;<a href=\"https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.db_type\" title=\"django.db.models.Field.db_type\"><code>db_type()</code></a>&nbsp;and&nbsp;<a href=\"https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.rel_db_type\" title=\"django.db.models.Field.rel_db_type\"><code>rel_db_type()</code></a>&nbsp;methods are called by Django when the framework constructs the&nbsp;<code>CREATE&nbsp;TABLE</code>&nbsp;statements for your application &ndash; that is, when you first create your tables. The methods are also called when constructing a&nbsp;<code>WHERE</code>&nbsp;clause that includes the model field &ndash; that is, when you retrieve data using QuerySet methods like&nbsp;<code>get()</code>,&nbsp;<code>filter()</code>, and&nbsp;<code>exclude()</code>&nbsp;and have the model field as an argument. They are not called at any other time, so it can afford to execute slightly complex code, such as the&nbsp;<code>connection.settings_dict</code>&nbsp;check in the above example.</p>\r\n\r\n<p>Some database column types accept parameters, such as&nbsp;<code>CHAR(25)</code>, where the parameter&nbsp;<code>25</code>&nbsp;represents the maximum column length. In cases like these, it&rsquo;s more flexible if the parameter is specified in the model rather than being hard-coded in the&nbsp;<code>db_type()</code>&nbsp;method. For example, it wouldn&rsquo;t make much sense to have a&nbsp;<code>CharMaxlength25Field</code>, shown here:</p>", "image": "", "slug": "life-test-1", "created_date": "2020-06-19T07:19:23Z", "published_date": "2020-06-19T07:19:36Z", "views": 0, "food": false, "movie": false, "faith": false, "life": true}}, {"model": "posts.post", "pk": 17, "fields": {"author": 1, "title": "life test 2", "text": "<p>The&nbsp;<a href=\"https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.db_type\" title=\"django.db.models.Field.db_type\"><code>db_type()</code></a>&nbsp;and&nbsp;<a href=\"https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.rel_db_type\" title=\"django.db.models.Field.rel_db_type\"><code>rel_db_type()</code></a>&nbsp;methods are called by Django when the framework constructs the&nbsp;<code>CREATE&nbsp;TABLE</code>&nbsp;statements for your application &ndash; that is, when you first create your tables. The methods are also called when constructing a&nbsp;<code>WHERE</code>&nbsp;clause that includes the model field &ndash; that is, when you retrieve data using QuerySet methods like&nbsp;<code>get()</code>,&nbsp;<code>filter()</code>, and&nbsp;<code>exclude()</code>&nbsp;and have the model field as an argument. They are not called at any other time, so it can afford to execute slightly complex code, such as the&nbsp;<code>connection.settings_dict</code>&nbsp;check in the above example.</p>\r\n\r\n<p>Some database column types accept parameters, such as&nbsp;<code>CHAR(25)</code>, where the parameter&nbsp;<code>25</code>&nbsp;represents the maximum column length. In cases like these, it&rsquo;s more flexible if the parameter is specified in the model rather than being hard-coded in the&nbsp;<code>db_type()</code>&nbsp;method. For example, it wouldn&rsquo;t make much sense to have a&nbsp;<code>CharMaxlength25Field</code>, shown here:</p>", "image": "", "slug": "life-test-2", "created_date": "2020-06-19T07:19:43Z", "published_date": "2020-06-19T07:19:55Z", "views": 0, "food": false, "movie": false, "faith": false, "life": true}}, {"model": "posts.post", "pk": 18, "fields": {"author": 1, "title": "life test 3", "text": "<p>The&nbsp;<a href=\"https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.db_type\" title=\"django.db.models.Field.db_type\"><code>db_type()</code></a>&nbsp;and&nbsp;<a href=\"https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.rel_db_type\" title=\"django.db.models.Field.rel_db_type\"><code>rel_db_type()</code></a>&nbsp;methods are called by Django when the framework constructs the&nbsp;<code>CREATE&nbsp;TABLE</code>&nbsp;statements for your application &ndash; that is, when you first create your tables. The methods are also called when constructing a&nbsp;<code>WHERE</code>&nbsp;clause that includes the model field &ndash; that is, when you retrieve data using QuerySet methods like&nbsp;<code>get()</code>,&nbsp;<code>filter()</code>, and&nbsp;<code>exclude()</code>&nbsp;and have the model field as an argument. They are not called at any other time, so it can afford to execute slightly complex code, such as the&nbsp;<code>connection.settings_dict</code>&nbsp;check in the above example.</p>\r\n\r\n<p>Some database column types accept parameters, such as&nbsp;<code>CHAR(25)</code>, where the parameter&nbsp;<code>25</code>&nbsp;represents the maximum column length. In cases like these, it&rsquo;s more flexible if the parameter is specified in the model rather than being hard-coded in the&nbsp;<code>db_type()</code>&nbsp;method. For example, it wouldn&rsquo;t make much sense to have a&nbsp;<code>CharMaxlength25Field</code>, shown here:</p>", "image": "", "slug": "life-test-3", "created_date": "2020-06-19T07:20:02Z", "published_date": "2020-06-19T07:20:12Z", "views": 1, "food": false, "movie": false, "faith": false, "life": true}}, {"model": "posts.post", "pk": 19, "fields": {"author": 1, "title": "life test 444444444444", "text": "<p style=\"text-align:justify\">The&nbsp;<a href=\"https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.db_type\" title=\"django.db.models.Field.db_type\"><code>db_type()</code></a>&nbsp;and&nbsp;<a href=\"https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.rel_db_type\" title=\"django.db.models.Field.rel_db_type\"><code>rel_db_type()</code></a>&nbsp;methods are called by Django when the framework constructs the&nbsp;<code>CREATE&nbsp;TABLE</code>&nbsp;statements for your application &ndash; that is, when you first create your tables. The methods are also called when constructing a&nbsp;<code>WHERE</code>&nbsp;clause that includes the model field &ndash; that is, when you retrieve data using QuerySet methods like&nbsp;<code>get()</code>,&nbsp;<code>filter()</code>, and&nbsp;<code>exclude()</code>&nbsp;and have the model field as an argument. They are not called at any other time, so it can afford to execute slightly complex code, such as the&nbsp;<code>connection.settings_dict</code>&nbsp;check in the above example.</p>\r\n\r\n<p style=\"text-align:justify\">Some database column types accept parameters, such as&nbsp;<code>CHAR(25)</code>, where the parameter&nbsp;<code>25</code>&nbsp;represents the maximum column length. In cases like these, it&rsquo;s more flexible if the parameter is specified in the model rather than being hard-coded in the&nbsp;<code>db_type()</code>&nbsp;method. For example, it wouldn&rsquo;t make much sense to have a&nbsp;<code>CharMaxlength25Field</code>, shown here:</p>", "image": "", "slug": "life-test-444444444444", "created_date": "2020-06-19T07:20:17Z", "published_date": "2020-06-19T07:20:27Z", "views": 13, "food": false, "movie": false, "faith": false, "life": true}}, {"model": "admin.logentry", "pk": 1, "fields": {"action_time": "2020-06-03T10:23:40.860Z", "user": 1, "content_type": 7, "object_id": "8", "object_repr": "asdfasdf asdf", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 2, "fields": {"action_time": "2020-06-03T10:23:55.899Z", "user": 1, "content_type": 7, "object_id": "7", "object_repr": "second post", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 3, "fields": {"action_time": "2020-06-03T10:23:55.910Z", "user": 1, "content_type": 7, "object_id": "6", "object_repr": "asdaf", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 4, "fields": {"action_time": "2020-06-03T10:58:29.385Z", "user": 1, "content_type": 7, "object_id": "14", "object_repr": "asdfadfass", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 5, "fields": {"action_time": "2020-06-03T10:58:29.396Z", "user": 1, "content_type": 7, "object_id": "13", "object_repr": "asdfdsaf", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 6, "fields": {"action_time": "2020-06-03T10:58:29.402Z", "user": 1, "content_type": 7, "object_id": "12", "object_repr": "reqwrqer", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 7, "fields": {"action_time": "2020-06-03T10:58:29.408Z", "user": 1, "content_type": 7, "object_id": "11", "object_repr": "weqrqwerqer", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 8, "fields": {"action_time": "2020-06-03T10:58:29.414Z", "user": 1, "content_type": 7, "object_id": "10", "object_repr": "weqrqwerqer", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 9, "fields": {"action_time": "2020-06-03T10:58:29.420Z", "user": 1, "content_type": 7, "object_id": "9", "object_repr": "fdfd", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 10, "fields": {"action_time": "2020-06-03T10:58:29.427Z", "user": 1, "content_type": 7, "object_id": "8", "object_repr": "asdfasdf asdf", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 11, "fields": {"action_time": "2020-06-04T07:18:09.796Z", "user": 1, "content_type": 3, "object_id": "1", "object_repr": "Blog Members", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 12, "fields": {"action_time": "2020-06-04T07:18:19.656Z", "user": 1, "content_type": 3, "object_id": "1", "object_repr": "Members", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Name\"]}}]"}}, {"model": "admin.logentry", "pk": 13, "fields": {"action_time": "2020-06-04T07:56:38.327Z", "user": 1, "content_type": 4, "object_id": "2", "object_repr": "sofia", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 14, "fields": {"action_time": "2020-06-04T07:58:07.199Z", "user": 1, "content_type": 4, "object_id": "2", "object_repr": "sofia", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 15, "fields": {"action_time": "2020-06-04T11:09:04.668Z", "user": 1, "content_type": 4, "object_id": "1", "object_repr": "edward", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"First name\", \"Last name\"]}}]"}}, {"model": "admin.logentry", "pk": 16, "fields": {"action_time": "2020-06-05T08:07:41.049Z", "user": 1, "content_type": 4, "object_id": "6", "object_repr": "fdsafdsafdsafdsa", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 17, "fields": {"action_time": "2020-06-05T08:07:41.059Z", "user": 1, "content_type": 4, "object_id": "5", "object_repr": "redorangesoul", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 18, "fields": {"action_time": "2020-06-05T08:07:41.065Z", "user": 1, "content_type": 4, "object_id": "2", "object_repr": "sofia", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 19, "fields": {"action_time": "2020-06-05T08:07:41.071Z", "user": 1, "content_type": 4, "object_id": "3", "object_repr": "test", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 20, "fields": {"action_time": "2020-06-05T08:07:41.078Z", "user": 1, "content_type": 4, "object_id": "7", "object_repr": "testtesttest", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 21, "fields": {"action_time": "2020-06-05T08:07:41.085Z", "user": 1, "content_type": 4, "object_id": "8", "object_repr": "testtesttesttest", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 22, "fields": {"action_time": "2020-06-05T08:07:41.091Z", "user": 1, "content_type": 4, "object_id": "4", "object_repr": "testuser", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 23, "fields": {"action_time": "2020-06-05T08:13:58.698Z", "user": 1, "content_type": 3, "object_id": "1", "object_repr": "Members", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Permissions\"]}}]"}}, {"model": "admin.logentry", "pk": 24, "fields": {"action_time": "2020-06-05T08:54:09.223Z", "user": 1, "content_type": 3, "object_id": "1", "object_repr": "Members", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Permissions\"]}}]"}}, {"model": "admin.logentry", "pk": 25, "fields": {"action_time": "2020-06-05T09:13:03.089Z", "user": 1, "content_type": 3, "object_id": "1", "object_repr": "Members", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Permissions\"]}}]"}}, {"model": "admin.logentry", "pk": 26, "fields": {"action_time": "2020-06-05T09:13:54.452Z", "user": 1, "content_type": 3, "object_id": "1", "object_repr": "Members", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Permissions\"]}}]"}}, {"model": "admin.logentry", "pk": 27, "fields": {"action_time": "2020-06-05T09:22:11.410Z", "user": 1, "content_type": 3, "object_id": "1", "object_repr": "Members", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Permissions\"]}}]"}}, {"model": "admin.logentry", "pk": 28, "fields": {"action_time": "2020-06-05T23:42:41.360Z", "user": 1, "content_type": 3, "object_id": "1", "object_repr": "Members", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Permissions\"]}}]"}}, {"model": "admin.logentry", "pk": 29, "fields": {"action_time": "2020-06-08T07:37:35.759Z", "user": 1, "content_type": 11, "object_id": "7", "object_repr": "Where is Mom", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Author\", \"Text\"]}}]"}}, {"model": "admin.logentry", "pk": 30, "fields": {"action_time": "2020-06-08T07:41:24.933Z", "user": 1, "content_type": 11, "object_id": "7", "object_repr": "Where is Mom", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Text\"]}}]"}}, {"model": "admin.logentry", "pk": 31, "fields": {"action_time": "2020-06-08T07:42:03.898Z", "user": 1, "content_type": 11, "object_id": "7", "object_repr": "Where is Mom", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Text\"]}}]"}}, {"model": "admin.logentry", "pk": 32, "fields": {"action_time": "2020-06-09T07:47:14.391Z", "user": 1, "content_type": 11, "object_id": "7", "object_repr": "Where is Mom", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Text\"]}}]"}}, {"model": "admin.logentry", "pk": 33, "fields": {"action_time": "2020-06-09T10:01:31.941Z", "user": 1, "content_type": 11, "object_id": "7", "object_repr": "Where is Mom", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Text\"]}}]"}}, {"model": "admin.logentry", "pk": 34, "fields": {"action_time": "2020-06-09T10:02:30.607Z", "user": 1, "content_type": 11, "object_id": "7", "object_repr": "Where is Mom", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Text\"]}}]"}}, {"model": "admin.logentry", "pk": 35, "fields": {"action_time": "2020-06-09T11:34:10.977Z", "user": 1, "content_type": 11, "object_id": "7", "object_repr": "Where is Mom", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Text\"]}}]"}}, {"model": "admin.logentry", "pk": 36, "fields": {"action_time": "2020-06-09T11:35:12.032Z", "user": 1, "content_type": 11, "object_id": "7", "object_repr": "Where is Mom", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Text\"]}}]"}}, {"model": "admin.logentry", "pk": 37, "fields": {"action_time": "2020-06-09T11:36:23.499Z", "user": 1, "content_type": 11, "object_id": "7", "object_repr": "Where is Mom", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Text\"]}}]"}}, {"model": "admin.logentry", "pk": 38, "fields": {"action_time": "2020-06-09T11:37:52.644Z", "user": 1, "content_type": 11, "object_id": "7", "object_repr": "Where is Mom", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Text\"]}}]"}}, {"model": "admin.logentry", "pk": 39, "fields": {"action_time": "2020-06-09T11:50:32.456Z", "user": 1, "content_type": 11, "object_id": "7", "object_repr": "Where is Mom", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Text\"]}}]"}}, {"model": "admin.logentry", "pk": 40, "fields": {"action_time": "2020-06-18T06:40:38.199Z", "user": 1, "content_type": 11, "object_id": "7", "object_repr": "Where is Mom", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Views\"]}}]"}}, {"model": "admin.logentry", "pk": 41, "fields": {"action_time": "2020-06-18T06:55:27.810Z", "user": 1, "content_type": 11, "object_id": "6", "object_repr": "Third Blog Post", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Text\", \"Views\"]}}]"}}, {"model": "admin.logentry", "pk": 42, "fields": {"action_time": "2020-06-19T07:08:16.588Z", "user": 1, "content_type": 11, "object_id": "7", "object_repr": "Where is Mom", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Faith\"]}}]"}}, {"model": "admin.logentry", "pk": 43, "fields": {"action_time": "2020-06-19T07:08:30.426Z", "user": 1, "content_type": 11, "object_id": "4", "object_repr": "TEST", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Text\", \"Faith\"]}}]"}}, {"model": "admin.logentry", "pk": 44, "fields": {"action_time": "2020-06-19T07:08:36.195Z", "user": 1, "content_type": 11, "object_id": "5", "object_repr": "TEST 2", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Text\", \"Faith\"]}}]"}}, {"model": "admin.logentry", "pk": 45, "fields": {"action_time": "2020-06-19T07:08:41.160Z", "user": 1, "content_type": 11, "object_id": "6", "object_repr": "Third Blog Post", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Faith\"]}}]"}}, {"model": "admin.logentry", "pk": 46, "fields": {"action_time": "2020-06-19T07:12:37.805Z", "user": 1, "content_type": 11, "object_id": "8", "object_repr": "food test", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 47, "fields": {"action_time": "2020-06-19T07:12:48.334Z", "user": 1, "content_type": 11, "object_id": "8", "object_repr": "food test", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Published date\"]}}]"}}, {"model": "admin.logentry", "pk": 48, "fields": {"action_time": "2020-06-19T07:13:21.836Z", "user": 1, "content_type": 11, "object_id": "9", "object_repr": "food test 2", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 49, "fields": {"action_time": "2020-06-19T07:13:37.256Z", "user": 1, "content_type": 11, "object_id": "10", "object_repr": "food test 3", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 50, "fields": {"action_time": "2020-06-19T07:13:55.485Z", "user": 1, "content_type": 11, "object_id": "11", "object_repr": "food test 4", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 51, "fields": {"action_time": "2020-06-19T07:18:19.706Z", "user": 1, "content_type": 11, "object_id": "12", "object_repr": "movie test 1", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 52, "fields": {"action_time": "2020-06-19T07:18:44.042Z", "user": 1, "content_type": 11, "object_id": "13", "object_repr": "movie test 2", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 53, "fields": {"action_time": "2020-06-19T07:19:01.135Z", "user": 1, "content_type": 11, "object_id": "14", "object_repr": "movie test 3", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 54, "fields": {"action_time": "2020-06-19T07:19:18.128Z", "user": 1, "content_type": 11, "object_id": "15", "object_repr": "movie test 4", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 55, "fields": {"action_time": "2020-06-19T07:19:39.446Z", "user": 1, "content_type": 11, "object_id": "16", "object_repr": "life test 1", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 56, "fields": {"action_time": "2020-06-19T07:20:00.073Z", "user": 1, "content_type": 11, "object_id": "17", "object_repr": "life test 2", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 57, "fields": {"action_time": "2020-06-19T07:20:14.271Z", "user": 1, "content_type": 11, "object_id": "18", "object_repr": "life test 3", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 58, "fields": {"action_time": "2020-06-19T07:20:29.350Z", "user": 1, "content_type": 11, "object_id": "19", "object_repr": "life test 4", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 59, "fields": {"action_time": "2020-06-21T02:30:40.408Z", "user": 1, "content_type": 11, "object_id": "8", "object_repr": "food test", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Text\"]}}]"}}]
